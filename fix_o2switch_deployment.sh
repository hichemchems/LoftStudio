#!/bin/bash

# Script de correction pour le d√©ploiement LoftBarber sur o2switch
# Corrige les probl√®mes identifi√©s dans le diagnostic

echo "üîß CORRECTION D√âPLOIEMENT LoftBarber - o2switch"
echo "==============================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# 1. Sauvegarde des fichiers actuels
log_step "1. Cr√©ation de sauvegardes"
if [ -f ".htaccess" ]; then
    cp .htaccess .htaccess.backup.$(date +%Y%m%d_%H%M%S)
    log_info "Sauvegarde .htaccess cr√©√©e"
fi

if [ -f "server.js" ]; then
    cp server.js server.js.backup.$(date +%Y%m%d_%H%M%S)
    log_info "Sauvegarde server.js cr√©√©e"
fi

# 2. Correction du fichier .htaccess
log_step "2. Correction de la configuration Passenger (.htaccess)"
cat > .htaccess << 'EOF'
# Phusion Passenger configuration for Node.js
PassengerAppRoot /home/dije1636/public_html/loftbarber
PassengerAppType node
PassengerStartupFile server.js
PassengerNodejs /opt/alt/alt-nodejs20/root/usr/bin/node
PassengerFriendlyErrorPages on
PassengerAppLogFile /home/dije1636/logs/loftbarber.log

# Enable rewrite engine
RewriteEngine On

# Handle client-side routing (exclude API routes)
RewriteCond %{REQUEST_URI} !^/api/
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.html [L]

# Security headers
<IfModule mod_headers.c>
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options DENY
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
    Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:;"
</IfModule>

<IfModule mod_expires.c>
    ExpiresActive on
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType application/javascript "access plus 1 month"
    ExpiresByType image/png "access plus 1 month"
    ExpiresByType image/jpg "access plus 1 month"
    ExpiresByType image/jpeg "access plus 1 month"
    ExpiresByType image/gif "access plus 1 month"
    ExpiresByType image/svg+xml "access plus 1 month"
    ExpiresByType font/woff "access plus 1 month"
    ExpiresByType font/woff2 "access plus 1 month"
</IfModule>
EOF
log_info "‚úÖ .htaccess corrig√© avec configuration Passenger compl√®te"

# 3. Correction du fichier server.js pour g√©rer les erreurs de d√©marrage
log_step "3. Correction de server.js pour une meilleure gestion d'erreurs"
sed -i.bak '
// Phusion Passenger configuration for o2switch
if (typeof PhusionPassenger !== "undefined") {
    PhusionPassenger.configure({ autoInstall: false });
}

// Debug logging for o2switch
console.log('\''üöÄ Starting LoftBarber server...'\'');
console.log('\''Node version:'\'', process.version);
console.log('\''Environment:'\'', process.env.NODE_ENV || '\''development'\'');
console.log('\''Passenger env:'\'', process.env.PASSENGER_APP_ENV || '\''not set'\'');
console.log('\''Working directory:'\'', process.cwd());
console.log('\''Files in directory:'\'', require('\''fs'\'').readdirSync('\''.'\'').slice(0, 10));
' server.js

# Ajouter une gestion d'erreur globale au d√©but
sed -i '1a\
// Global error handler for uncaught exceptions\
process.on('\''uncaughtException'\'', (err) => {\
  console.error('\''Uncaught Exception:'\'', err);\
  process.exit(1);\
});\
\
process.on('\''unhandledRejection'\'', (reason, promise) => {\
  console.error('\''Unhandled Rejection at:'\'', promise, '\''reason:'\'', reason);\
  process.exit(1);\
});\
' server.js

log_info "‚úÖ server.js corrig√© avec gestion d'erreurs globale"

# 4. Cr√©er un fichier de configuration de base de donn√©es corrig√©
log_step "4. Correction de la configuration base de donn√©es"
mkdir -p backend/config

cat > backend/config/database.js << 'EOF'
const { Sequelize } = require('sequelize');
require('dotenv').config();

const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    dialect: 'mysql',
    dialectOptions: {
      charset: 'utf8mb4',
      supportBigNumbers: true,
      bigNumberStrings: true,
      // Support pour les mots de passe avec caract√®res sp√©ciaux
      connectTimeout: 60000,
      acquireTimeout: 60000,
      timeout: 60000,
    },
    logging: process.env.NODE_ENV === 'development' ? console.log : false,
    pool: {
      max: 5,
      min: 0,
      acquire: 30000,
      idle: 10000
    },
    define: {
      timestamps: true,
      underscored: true,
      paranoid: false
    }
  }
);

// Test connection avec timeout
const testConnection = async () => {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Database connection established successfully.');
    return true;
  } catch (error) {
    console.error('‚ùå Database connection failed:', error.message);
    console.error('Connection details:', {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      database: process.env.DB_NAME,
      user: process.env.DB_USER
    });
    throw error;
  }
};

module.exports = { sequelize, testConnection };
EOF
log_info "‚úÖ Configuration base de donn√©es corrig√©e"

# 5. Cr√©er un script de test de d√©marrage isol√©
log_step "5. Cr√©ation d'un script de test de d√©marrage"
cat > test_startup.js << 'EOF'
#!/usr/bin/env node

// Script de test de d√©marrage isol√© pour diagnostiquer les probl√®mes
console.log('üß™ TEST DE D√âMARRAGE LoftBarber');
console.log('================================');

// Test 1: Variables d'environnement
console.log('\n1. Variables d\'environnement:');
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('DB_HOST:', process.env.DB_HOST);
console.log('DB_NAME:', process.env.DB_NAME);
console.log('DB_USER:', process.env.DB_USER);
console.log('DB_PASSWORD:', process.env.DB_PASSWORD ? '[D√âFINI]' : '[NON D√âFINI]');
console.log('JWT_SECRET:', process.env.JWT_SECRET ? '[D√âFINI]' : '[NON D√âFINI]');

// Test 2: Imports de base
console.log('\n2. Test des imports:');
try {
    const express = require('express');
    console.log('‚úÖ Express import√©');

    const { Sequelize } = require('sequelize');
    console.log('‚úÖ Sequelize import√©');

    const mysql2 = require('mysql2');
    console.log('‚úÖ mysql2 import√©');

    const cors = require('cors');
    console.log('‚úÖ cors import√©');

    const helmet = require('helmet');
    console.log('‚úÖ helmet import√©');
} catch (error) {
    console.log('‚ùå Erreur d\'import:', error.message);
    process.exit(1);
}

// Test 3: Connexion DB
console.log('\n3. Test de connexion DB:');
const { Sequelize } = require('sequelize');

const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    dialect: 'mysql',
    logging: false,
    pool: { max: 1, min: 0, acquire: 10000, idle: 5000 }
  }
);

sequelize.authenticate()
  .then(() => {
    console.log('‚úÖ Connexion DB r√©ussie');
    return sequelize.close();
  })
  .then(() => {
    console.log('‚úÖ Test termin√© avec succ√®s');
    process.exit(0);
  })
  .catch(err => {
    console.log('‚ùå Erreur DB:', err.message);
    process.exit(1);
  });
EOF

chmod +x test_startup.js
log_info "‚úÖ Script de test de d√©marrage cr√©√©"

# 6. Corriger les permissions
log_step "6. Correction des permissions"
chmod 644 .htaccess
chmod 644 server.js
chmod 644 backend/config/database.js
chmod 755 test_startup.js

if [ -d "node_modules" ]; then
    chmod -R 755 node_modules
fi

log_info "‚úÖ Permissions corrig√©es"

# 7. Cr√©er un script de red√©marrage propre
log_step "7. Cr√©ation d'un script de red√©marrage"
cat > restart_app.sh << 'EOF'
#!/bin/bash

echo "üîÑ RED√âMARRAGE LoftBarber"
echo "========================"

# Activer l'environnement Node.js
echo "Activation de l'environnement virtuel..."
source ~/nodevenv/public_html/loftbarber/20/bin/activate

if [ $? -ne 0 ]; then
    echo "‚ùå Impossible d'activer l'environnement virtuel"
    exit 1
fi

echo "‚úÖ Environnement activ√©"

# Tester le d√©marrage
echo "Test de d√©marrage rapide..."
timeout 5s node test_startup.js

if [ $? -eq 0 ]; then
    echo "‚úÖ Test r√©ussi, red√©marrage de l'application..."
    echo "Allez dans cPanel > Node.js Selector > Applications > LoftBarber > Restart"
    echo "Ou utilisez le bouton Restart dans l'interface"
else
    echo "‚ùå Test √©chou√©, v√©rifiez les logs et les configurations"
    exit 1
fi
EOF

chmod +x restart_app.sh
log_info "‚úÖ Script de red√©marrage cr√©√©"

echo ""
echo "=========================================="
echo "üéØ CORRECTIONS APPLIQU√âES"
echo "=========================================="
echo ""
echo "‚úÖ Configuration Passenger (.htaccess) corrig√©e"
echo "‚úÖ Gestion d'erreurs globale ajout√©e √† server.js"
echo "‚úÖ Configuration DB am√©lior√©e avec timeouts"
echo "‚úÖ Script de test de d√©marrage cr√©√©"
echo "‚úÖ Permissions corrig√©es"
echo "‚úÖ Script de red√©marrage cr√©√©"
echo ""
echo "üìã PROCHAINES √âTAPES:"
echo "1. Ex√©cutez: ./restart_app.sh"
echo "2. Red√©marrez l'app via cPanel > Node.js Selector > Restart"
echo "3. Testez: curl -I https://loft-barber.com/api/v1/health"
echo "4. V√©rifiez les logs: tail -f ~/logs/loftbarber.log"
echo ""
echo "üîç Si probl√®me persiste, ex√©cutez le diagnostic: ./diagnostic_o2switch_complete.sh"
